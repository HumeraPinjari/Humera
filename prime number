import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

     

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def generate_data(num_samples, max_num):
    X = np.arange(1, num_samples + 1).reshape(-1, 1)
    Y = np.array([1 if is_prime(x) else 0 for x in X])
    return X, Y

num_samples = 1000
max_num = num_samples  # Use numbers from 1 to num_samples

X_train, Y_train = generate_data(num_samples, max_num)

     

def create_model():
    model = keras.Sequential([
        layers.Input(shape=(1,)),
        layers.Dense(256, activation='relu'),
        layers.Dense(128, activation='relu'),
        layers.Dense(64, activation='relu'),
        layers.Dense(32, activation='relu'),
        layers.Dense(1, activation='sigmoid')
    ])

    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

     

from sklearn.preprocessing import MinMaxScaler

def generate_data(num_samples):
    X = np.arange(1, num_samples + 1).reshape(-1, 1)
    scaler = MinMaxScaler()
    X_scaled = scaler.fit_transform(X)
    Y = np.array([1 if is_prime(x) else 0 for x in X])
    return X_scaled, Y

     

X_train, Y_train = generate_data(num_samples)

model = create_model()

history = model.fit(
    X_train, Y_train,
    epochs=50,  # Increase epochs
    batch_size=128,  # Adjust batch size
    validation_split=0.2  # Use a validation split to monitor performance
)

# Evaluate the model
X_test, Y_test = generate_data(1000)  # Larger test set
loss, accuracy = model.evaluate(X_test, Y_test)
print(f'Test loss: {loss}, Test accuracy: {accuracy}')
